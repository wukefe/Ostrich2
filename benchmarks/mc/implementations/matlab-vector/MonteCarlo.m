function [piValue] = MonteCarlo(inputData)
  mc_t29 = 2;
  [n] = size(inputData, mc_t29);
  mc_t30 = 1;
  [sampleOut] = zeros(mc_t30, n);
  mc_t33 = 1;
  [k] = colon(mc_t33, n);
  mc_t32 = 2;
  mc_t31 = 1;
  [mc_t23] = inputData(mc_t31, k);
  [mc_t24] = inputData(mc_t32, k);
  [mc_t22] = SampleFunc(mc_t23, mc_t24);
  sampleOut(k) = mc_t22;
  reduceCount = 0;
  mc_t34 = 1;
  [k] = colon(mc_t34, n);
  [mc_t26] = sampleOut(k);
%mc_t25 = reduceCount;
%[reduceCount] = plus(mc_t25, mc_t26);
  [mc_sum0] = sum(mc_t26);
  [reduceCount] = plus(reduceCount, mc_sum0);
  mc_t35 = 4;
  [mc_t27] = times(mc_t35, reduceCount);
  mc_t28 = n;
  [piValue] = rdivide(mc_t27, mc_t28);
end
function [z] = SampleFunc(a, b)
  mc_t40 = 2;
  [mc_t38] = power(a, mc_t40);
  mc_t41 = 2;
  [mc_t39] = power(b, mc_t41);
  [mc_t36] = plus(mc_t38, mc_t39);
  mc_t43 = 1;
  [mc_t42] = lt(mc_t36, mc_t43);
  thenCond = mc_t42;
  [elseCond] = not(thenCond);
  new_t0 = 1;
  [new_t1] = times(thenCond, new_t0);
  new_t2 = 0;
  [new_t3] = times(elseCond, new_t2);
  [z] = plus(new_t3, new_t1);
end
